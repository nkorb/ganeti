======================================
Native VirtIO RNG support for QEMU/KVM
======================================

:Created: 2019-Apr-25
:Status: Implemented
:Ganeti-Version: 3.0.0

Background
==========

A large number of applications need to have access to random numbers.
The most common example is cryptography, where random numbers are used
to generate encryption keys for applications. In order to produce such
numbers, computers use Random and Pseudorandom Number Generators (RNGs,
PRNGs). Most RNGs (such as Linux's one), gather entropy from "random"
phenomena, such as interrupts, user input and disk activity.

Virtualization can affect the quantity of produced entropy, since most
of the aforementioned entropy sources either do not exist or provide
almost no input. This can cause entropy starvation on VMs, a state where
no entropy is present and RNGs can not produce any random numbers,
causing applications to block, increased boot times, etc.

Fortunately, there are multiple efforts being made to provide more
(and maybe better) entropy to guests, which we will describe below.

Available Solutions
===================

RDRAND & RDSEED
---------------

Regarding x86, Intel introduced two new instructions to overcome these
issues:

- ``RDRAND`` (since Ivy Bridge) returns numbers generated by a PRNG
- ``RDSEED`` (since Broadwell) which return bits generated by a TRNG

These instructions can be enabled on a per cluster or instance basis,
by appending ``+rdrand`` and/or ``+rdseed`` to hypervisor parameter
``cpu_type``. This allows KVM to expose these instructions to the guest
OS. Latest versions of most OSes, make use of these instructions in
their RNGs.

VirtIO RNG
----------

Another solution for KVM-based guests is VirtIO RNG. KVM implements a
paravirtual device, called VirtIO RNG, that exposes a hardware RNG to
the guest. This device appears as a regular RNG device inside the guest
and is used by the guest's kernel to fill its entropy pool. This means
that it is possible to provide entropy to guests from sources, initially
available only to the host. This device will be exposed as a PCI device
to the guest. VirtIO RNG is supported by most popular operating systems
(Linux, Windows, FreeBSD, OpenBSD).

Proposed Solution
=================

We propose the addition of support for VirtIO RNG to Ganeti, for
QEMU/KVM guests for the following reasons:

- VirtIO is a well-known interface, supported by most OSes
- VirtIO RNG can expose kernel, userspace and hardware RNGs to guests
- Can be very easily enabled in QEMU
- It does not depend on hardware-specific features

Regarding ``RDRAND`` and ``RDSEED``: Since Ganeti spawns instances with
QEMU's default CPU type by default (which does not support these
instructions) and does not provide any mechanism to auto-detect the
host's CPU and pass related parameters to QEMU (which might also not be
desired due to heterogeneous hardware inside a cluster), we decide not
to implement any functionality for these instructions right now.

Overview
========

Backends
--------

VirtIO RNG supports two different ways to fetch entropy from the host.

Character Device
^^^^^^^^^^^^^^^^

VirtIO RNG can open directly a character device and fetch entropy from
there. This can be host's ``/dev/{,u}random`` or a real hardware
device. By default, VirtIO RNG uses the host's ``/dev/random``.


Entropy Gathering Daemon Protocol
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

VirtIO RNG can also retrieve entropy from daemons using the EGD
protocol. This requires the creation of an additional ``chardev`` in
QEMU, which retrieves data from a socket and passes it to the driver.

Usage
-----

Below we will describe how VirtIO RNG can be enabled and configured in
QEMU. This step is necessary in order to understand how this feature
can be enabled through QEMU and, eventually, how should we expose it
through Ganeti.

Basic Invocation
^^^^^^^^^^^^^^^^

This will add the device with a default host backend, which utilizes
``/dev/random``, since QEMU 1.3::

    -device virtio-rng-pci

Rate Limiting
^^^^^^^^^^^^^

VirtIO RNG accepts parameters that can limit the rate of data sent to
the guest. This is useful in order not to let a guest starve the host
of entropy, and thus all other VMs on it::

    -device virtio-rng-pci,max-bytes=1024,period=1000

The above example limits sent data to the guest at 1KB/second.

File Backend
^^^^^^^^^^^^

This backend is enabled by default, as noted above. We can point QEMU
to fetch entropy from a user-specified file. To do so, we have to
create a separate QEMU object::

    -object rng-random,filename=/dev/hwrng,id=rng0

which is, then, passed as a parameter to the device declaration::

    -device virtio-rng-pci,rng=rng0

EDG Backend
^^^^^^^^^^^

This backend requires the creation of a QEMU `socket`-based `chardev`,
which fetches entropy from a remote socket::

    -chardev socket,host=W.X.Y.Z,port=12345,id=chr0

which is exposed to VirtIO RNG, again, as an object::

    -object rng-egd,chardev=chr0,id=rng0 \
    -device virtio-rng-pci,rng=rng0

Implementation
==============

Our proposed implementation should meet a number of specifications which
will render this feature useful and safe:

- We should not expose every possible supported QEMU flag to Ganeti
  users. Even one flag should be sufficient for most use-cases.
- Since we don't want to expose complexity to users, this implementation
  should provide sane defaults which won't cause entropy starvation on
  our host and will provide a sufficient amount of entropy to each
  instance.

Limitations
-----------

In order to avoid excessive complexity, our proposed implementation is
bound by the following limitations:

- No support for EDG Backend, since its performance is reported to be
  very bad and usage is probably limited
- No support for custom character devices (hardware RNGs, etc). The
  demand is quite low and there are no reports right now about Ganeti
  users that use hardware RNGs and have to expose it to guests. This
  feature could be implemented in the future.
- No support for custom rate limits. We don't want to expose more
  complexity to the user regarding non-well-defined limits and low-level
  details.

Interface
---------

We propose the addition of a new Hypervisor parameter for `hv_kvm`
called `virtio_rng`, which is a string and accepts the following values:

- ``off``, which disables the driver
- ``random``, which enables the driver and uses ``/dev/random`` as a
  entropy source
- ``urandom``, which enables the driver and uses ``/dev/urandom`` as a
  entropy source

We propse that VirtIO RNG should be enabled by default on all Ganeti
installations with ``/dev/random`` as its source.

.. vim: set textwidth=72 :
.. Local Variables:
.. mode: rst
.. fill-column: 72
.. End:
